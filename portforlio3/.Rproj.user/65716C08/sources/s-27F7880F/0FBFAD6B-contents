---
title: "Portfolio3_data_reshaping"
author: "Yoo Ri Hwang"
date: "1/25/2022"
output: github_document
---

# Source & References

https://quantdev.ssri.psu.edu/tutorials/intro-data-reshape-plots-wisc
https://www.statmethods.net/management/reshape.html4
https://rfriend.tistory.com/80
https://www.datasciencemadesimple.com/reshape-in-r-from-wide-to-long-from-long-to-wide/

# Overview

In this portfolio, I aim to be familiar with data reshaping.
Before I jump in to the real project, I would make a small dataframe and try something

## Small dataset  trial 1

```{r, warning=FALSE, message=FALSE}

id<-c(1,1,2,2)
time<-c(1,2,1,2)
depress<-c(5,3,6,2)
anxiety<-c(6,5,1,4)

small<-data.frame(id,time,depress,anxiety)
print(small)
```

```{r,warning=FALSE, message=FALSE}
library(reshape)
mdata <- melt(small, id=c("id","time"))
print(small)
print(mdata)
```

```{r, warning=FALSE, message=FALSE}

# cast(data, formula, function)
subjmeans <- cast(mdata, id~variable, mean)
print(subjmeans)
timemeans <- cast(mdata, time~variable, mean)
print(timemeans)

```
## small dataset trial 2 

####  data frame 
```{r, warning=FALSE, message=FALSE}
country<-data.frame(c("A","B","C"),c(100,200,120),c(2000,7000,15000))
colnames(country)<- c("countries","population","gdp")
country
```
####  reshape this wide dataset to long 1

```{r, warning=FALSE, message=FALSE}


country_w_to_L<- reshape(data=country, idvar="countries",
                         varying=c("population","gdp"),
                         v.name=c("value"),
                         times=c("population","gdp"),
                         new.row.names=1:1000,
                         direction="long")

print(country_w_to_L)


# 
# Idvar: ID
# varying: the ones that would be converted from wide to long 
# v.names: value
# new.row.names: used to assign row names to the new dataset
# direction: wide/long
```

####  reshape this wide dataset to long 2

```{r, warning=FALSE, message=FALSE}
library(tidyr)

countries_w_to_l_2=gather(country,time,value,population:gdp, factor_key=TRUE)
print(countries_w_to_l_2)

```

#### reshaping long to wide 1

```{r, warning=FALSE, message=FALSE}

country_L_to_W<-reshape(
  data=country_w_to_L,
  v.names="value",
  idvar="countries",
  timevar="time",
  direction="wide"
)

print(country_L_to_W)
```

#### reshaping long to wide 1

```{r, warning=FALSE, message=FALSE}
library(tidyr)
countries_l_to_w_2 <-spread(countries_w_to_l_2, time, value)

print(countries_l_to_w_2)

```


# 1. repeated measure data 

## load library

```{r, warning=FALSE, message=FALSE}
library(psych)    
library(ggplot2)  
library(car)      
library(GGally)
#install.packages('GGally')
library(lattice) 
library(dplyr)
```

##load data

our main data 
```{r, warning=FALSE, message=FALSE}
filepath <- "https://quantdev.ssri.psu.edu/sites/qdev/files/wisc3raw.csv"
wisc3raw <- read.csv(file=url(filepath),header=TRUE)
```
our small data




## Data cleaning

```{r, warning=FALSE, message=FALSE}
#dput(colnames(wisc3raw)) # helpful ! 
#var_names <- tolower(colnames(wisc3raw)) # set all varaible names to lower case. 
```

## Data manipulation

subsetting data
```{r, warning=FALSE, message=FALSE}
var_names_sub <- c("id", 
                   "verb1","verb2","verb4","verb6",
                   "perfo1","perfo2","perfo4","perfo6",
                   "momed","grad")
wiscraw <- wisc3raw[,var_names_sub]
str(wiscraw)
```

## Data Reshaping: wide to long  


wide to long 
```{r, warning=FALSE, message=FALSE}

wisclong <- reshape(data=wiscraw,
                    varying = c("verb1","verb2","verb4","verb6",
                                "perfo1","perfo2","perfo4","perfo6"),
                    timevar=c("time"), 
                    idvar=c("id"),
                    direction="long", sep="")

print(head(wisclong,10))
```

long to wide

```{r, warning=FALSE, message=FALSE}

wiscwide <- reshape(data=wisclong, 
                    timevar=c("time"), 
                    idvar=c("id"),
                    v.names=c("verb","perfo"),
                    direction="wide", sep="_")

print(head(wiscwide,100))
```


### Descriptives for the repeated data

1. sample-level descriptive

```{r, warning=FALSE, message=FALSE}

describe(wisclong$verb)
```

2. sample-level descriptive across time

```{r, warning=FALSE, message=FALSE}
describe(wiscwide[c("verb_1","verb_2","verb_4","verb_6")])

describeBy(wisclong[,c("verb")],group=wisclong$time)

```


visualization- across time 
```{r, warning=FALSE, message=FALSE}

ggplot(data=wisclong, aes(x=verb)) +
  geom_histogram(binwidth=5, pad = TRUE, fill="white", color="blue") + 
  xlab("Verbal Ability") +
  facet_grid(time ~ .)


```

3. individual-level descriptives across time

```{r, warning=FALSE, message=FALSE}
library(lattice)

xyplot(verb ~ time, groups=id, 
       data=wisclong, type="l",
       main="verbal trajectory")

# ggplot(data = wisclong, aes(x =time, y = verb, group = id)) +
#   geom_point() + 
#   geom_line() +
#   xlab("time") + 
#   ylab("Verbal Ability") + ylim(0,80) +
#   scale_x_continuous(breaks=seq(1,5,by=1))


```

Visualization of small samples


```{r, warning=FALSE, message=FALSE}

ggplot(data=wisclong[which(wisclong$id<=20),], aes(x=time, y=verb, group=id)) +
  geom_point()+
  geom_line(data=wisclong[which(wisclong$id <=20 & wisclong$verb !="NA"),])+
              xlab("time")+
              ylab("verbal")+ylim(0,100) +
              facet_wrap(~id)

```
